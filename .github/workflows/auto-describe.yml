name: Auto-generate Column Descriptions

on:
  issues:
    types: [labeled]

jobs:
  update-schema:
    if: github.event.label.name == 'approved'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          pip install ruamel.yaml requests
      
      - name: Update schema from issue
        id: update_schema
        run: |
          python scripts/update_schema_from_issue.py \
            --issue-number ${{ github.event.issue.number }} \
            --repo ${{ github.repository }} \
            --token ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        id: create_pr
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Auto-generate descriptions for ${{ steps.update_schema.outputs.table_name }}"
          branch: auto-describe-${{ steps.update_schema.outputs.branch_suffix }}
          title: "Auto-generate descriptions for ${{ steps.update_schema.outputs.table_name }}"
          body: |
            Automatically generated column descriptions and README for `${{ steps.update_schema.outputs.table_name }}`.
            
            **Source Issue:** #${{ github.event.issue.number }}
            **Columns Updated:** ${{ steps.update_schema.outputs.columns_updated }}
            **README:** ${{ steps.update_schema.outputs.readme_status }}
            
            ---
            *Generated by GitHub Action from approved issue*
          labels: auto-generated
      
      - name: Comment on issue
        uses: actions/github-script@v6
        with:
          script: |
            const readmeStatus = '${{ steps.update_schema.outputs.readme_status }}';
            const readmeMsg = readmeStatus !== 'None' ? `\n**README:** ${readmeStatus}` : '';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… Successfully created PR: ${{ steps.create_pr.outputs.pull-request-url }}\n\n**Columns Updated:** ${{ steps.update_schema.outputs.columns_updated }}${readmeMsg}\n\nPlease review and merge when ready.`
            })